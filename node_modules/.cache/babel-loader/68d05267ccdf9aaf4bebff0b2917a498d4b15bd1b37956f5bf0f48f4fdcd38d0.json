{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\eckar\\\\machine-scheduler\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// File: frontend/src/App.js\nimport React, { useState, useEffect } from 'react';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport axios from 'axios';\nimport Section9 from './Section9';\nimport { parseDueDate, subWorkDays, fmtMMDD } from './helpers';\n\n// CONFIGURATION\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_ROOT = 'http://localhost:5000/api';\nconst WORK_START_HR = 8,\n  WORK_START_MIN = 30;\nconst WORK_END_HR = 16,\n  WORK_END_MIN = 30;\nconst WEEKENDS = [0, 6];\nconst HOLIDAYS = ['2025-01-01', '2025-12-25'];\n\n// COLOR CONSTANTS\nconst LIGHT_YELLOW = '#FFF9C4',\n  DARK_YELLOW = '#FDD835';\nconst LIGHT_GREY = '#ECEFF1',\n  DARK_GREY = '#616161';\nconst LIGHT_PURPLE = '#E1BEE7',\n  DARK_PURPLE = '#6A1B9A';\nconst BUBBLE_START = '#e0f7fa';\nconst BUBBLE_END = '#ffe0b2';\nconst BUBBLE_DELIV = '#c8e6c9';\nexport default function App() {\n  _s();\n  // Persisted placeholders (lazy-loaded)\n  const [placeholders, setPlaceholders] = useState(() => {\n    return JSON.parse(localStorage.getItem('placeholders') || '[]');\n  });\n  useEffect(() => {\n    localStorage.setItem('placeholders', JSON.stringify(placeholders));\n  }, [placeholders]);\n\n  // Core columns state\n  const [columns, setColumns] = useState({\n    queue: {\n      title: 'Queue',\n      jobs: []\n    },\n    machine1: {\n      title: 'Machine 1',\n      jobs: []\n    },\n    machine2: {\n      title: 'Machine 2',\n      jobs: []\n    }\n  });\n  const [links, setLinks] = useState(loadLinks());\n  const [syncStatus, setSyncStatus] = useState('');\n\n  // Modal form state\n  const [showModal, setShowModal] = useState(false);\n  const [ph, setPh] = useState({\n    id: null,\n    company: '',\n    quantity: '',\n    stitchCount: '',\n    inHand: '',\n    dueType: 'Hard Date'\n  });\n\n  // Initial data load\n  useEffect(() => {\n    fetchAll();\n  }, []);\n\n  // Manual sync handler\n  const handleSync = async () => {\n    setSyncStatus('');\n    await fetchAll();\n    setSyncStatus('updated');\n    setTimeout(() => setSyncStatus(''), 2000);\n  };\n\n  // === Section 2: Helpers ===\n  function isHoliday(dt) {\n    return dt instanceof Date && !isNaN(dt) && HOLIDAYS.includes(dt.toISOString().slice(0, 10));\n  }\n  function isWorkday(dt) {\n    return dt instanceof Date && !isNaN(dt) && !WEEKENDS.includes(dt.getDay()) && !isHoliday(dt);\n  }\n  function clampToWorkHours(dt) {\n    let d = new Date(dt);\n    while (!isWorkday(d) || d.getHours() < WORK_START_HR || d.getHours() === WORK_START_HR && d.getMinutes() < WORK_START_MIN) {\n      d.setDate(d.getDate() + 1);\n      d.setHours(WORK_START_HR, WORK_START_MIN, 0, 0);\n    }\n    if (d.getHours() > WORK_END_HR || d.getHours() === WORK_END_HR && d.getMinutes() >= WORK_END_MIN) {\n      d.setDate(d.getDate() + 1);\n      d.setHours(WORK_START_HR, WORK_START_MIN, 0, 0);\n      return clampToWorkHours(d);\n    }\n    return d;\n  }\n  function addWorkTime(start, ms) {\n    let remaining = ms;\n    let current = clampToWorkHours(start);\n    while (remaining > 0) {\n      const endOfDay = new Date(current);\n      endOfDay.setHours(WORK_END_HR, WORK_END_MIN, 0, 0);\n      const free = endOfDay.getTime() - current.getTime();\n      if (free <= 0) {\n        current = clampToWorkHours(new Date(current.setDate(current.getDate() + 1)));\n      } else if (remaining <= free) {\n        current = new Date(current.getTime() + remaining);\n        remaining = 0;\n      } else {\n        remaining -= free;\n        current = new Date(endOfDay);\n      }\n    }\n    return current;\n  }\n  function fmtDT(dt) {\n    const pad = n => String(n).padStart(2, '0');\n    const month = pad(dt.getMonth() + 1);\n    const day = pad(dt.getDate());\n    let h = dt.getHours(),\n      m = pad(dt.getMinutes()),\n      ap = h >= 12 ? 'PM' : 'AM';\n    h = h % 12 || 12;\n    return `${month}/${day} ${pad(h)}:${m} ${ap}`;\n  }\n  function parseDueDate(d) {\n    if (!d) return null;\n    if (/^\\d{4}-\\d{2}-\\d{2}$/.test(d)) return new Date(d);\n    const parts = d.split('/');\n    if (parts.length >= 2) {\n      const mo = +parts[0],\n        da = +parts[1],\n        yr = parts.length === 3 ? +parts[2] : new Date().getFullYear();\n      if (!isNaN(mo) && !isNaN(da) && !isNaN(yr)) return new Date(yr, mo - 1, da);\n    }\n    const dt = new Date(d);\n    return isNaN(dt) ? null : dt;\n  }\n  function addWorkDays(start, days) {\n    let d = new Date(start),\n      added = 0;\n    while (added < days) {\n      d.setDate(d.getDate() + 1);\n      if (isWorkday(d)) added++;\n    }\n    return d;\n  }\n  function subWorkDays(start, days) {\n    let d = new Date(start),\n      removed = 0;\n    while (removed < days) {\n      d.setDate(d.getDate() - 1);\n      if (isWorkday(d)) removed++;\n    }\n    return d;\n  }\n  function fmtMMDD(d) {\n    const dt = new Date(d);\n    const mo = String(dt.getMonth() + 1).padStart(2, '0');\n    const da = String(dt.getDate()).padStart(2, '0');\n    return `${mo}/${da}`;\n  }\n  function sortQueue(arr) {\n    return [...arr].sort((a, b) => {\n      const da = parseDueDate(a.due_date),\n        db = parseDueDate(b.due_date);\n      if (da && db) return da - db;\n      if (da) return -1;\n      if (db) return 1;\n      return 0;\n    });\n  }\n\n  // === Section 3: Scheduling & Late (using embroidery_start) ===\n  function scheduleMachineJobs(jobs) {\n    let prevEnd = null;\n    return jobs.map((job, idx) => {\n      // 1) Cutoff for late (6 work-days before due)\n      const eedDay = subWorkDays(parseDueDate(job.due_date), 6);\n      const cutoff = new Date(eedDay);\n      cutoff.setHours(WORK_END_HR, WORK_END_MIN, 0, 0);\n\n      // 2) StartTime\n      let start;\n      if (idx === 0) {\n        if (job.embroidery_start) {\n          start = clampToWorkHours(new Date(job.embroidery_start));\n        } else {\n          const nowIso = new Date().toISOString();\n          job.embroidery_start = nowIso;\n          start = clampToWorkHours(new Date(nowIso));\n          axios.put(`${API_ROOT}/orders/${job.id}`, {\n            embroidery_start: nowIso\n          }).catch(console.error);\n        }\n      } else {\n        start = clampToWorkHours(new Date(prevEnd.getTime() + 30 * 60000));\n      }\n\n      // 3) Run â†’ end\n      const qty = job.quantity % 6 === 0 ? job.quantity : Math.ceil(job.quantity / 6) * 6;\n      const runMs = job.stitchCount / 30000 * (qty / 6) * 3600000;\n      const end = addWorkTime(start, runMs);\n\n      // 4) Decorate\n      job._rawStart = start;\n      job._rawEnd = end;\n      job.start = fmtDT(start);\n      job.end = fmtDT(end);\n      job.delivery = fmtMMDD(addWorkDays(end, 6));\n      job.isLate = end > cutoff;\n      prevEnd = end;\n      return job;\n    });\n  }\n\n  // === Section 4: Link Utilities ===\n  function loadLinks() {\n    try {\n      return JSON.parse(localStorage.getItem('jobLinks') || '{}');\n    } catch {\n      return {};\n    }\n  }\n  function saveLinks(map) {\n    localStorage.setItem('jobLinks', JSON.stringify(map));\n  }\n  function getChain(jobs, id) {\n    const fwd = {},\n      rev = {};\n    jobs.forEach(j => {\n      if (j.linkedTo) {\n        fwd[j.id] = j.linkedTo;\n        rev[j.linkedTo] = j.id;\n      }\n    });\n\n    // find root of the chain\n    let root = id;\n    while (rev[root]) {\n      root = rev[root];\n    }\n\n    // build the chain array\n    const chain = [];\n    let cur = root;\n    while (cur) {\n      chain.push(cur);\n      cur = fwd[cur];\n    }\n    return chain;\n  }\n\n  // === Section 5: FETCH & MERGE (with Placeholder Injection) ===\n  const fetchAll = async () => {\n    try {\n      // 1) Load manual state\n      const manualState = JSON.parse(localStorage.getItem('manualState') || JSON.stringify({\n        machine1: [],\n        machine2: []\n      }));\n\n      // 2) Preserve embroidery_start\n      const prevEmb = {};\n      Object.values(columns).flatMap(col => col.jobs).forEach(j => {\n        prevEmb[j.id] = j.embroidery_start || j.start_date || '';\n      });\n\n      // 3) Fetch live data\n      const [{\n        data: orders\n      }, {\n        data: embList\n      }] = await Promise.all([axios.get(`${API_ROOT}/orders`), axios.get(`${API_ROOT}/embroideryList`)]);\n\n      // 4) Build embroidery map\n      const embMap = {};\n      embList.forEach(row => {\n        const id = String(row['Order #'] || '').trim();\n        if (id) embMap[id] = row['Embroidery Start Time'] || '';\n      });\n\n      // 5) Construct jobById from server data\n      const jobById = {};\n      orders.forEach(o => {\n        var _ref, _embMap$id, _ref2, _o$machineId;\n        if (o.id == null) return;\n        const id = String(o.id).trim();\n        const rawTs = (_ref = (_embMap$id = embMap[id]) !== null && _embMap$id !== void 0 ? _embMap$id : prevEmb[id]) !== null && _ref !== void 0 ? _ref : '';\n        jobById[id] = {\n          ...o,\n          id,\n          stitchCount: o.stitch_count,\n          quantity: o.quantity,\n          company: o.company,\n          design: o.design,\n          due_date: o.due_date,\n          due_type: o.due_type,\n          embroidery_start: rawTs,\n          start_date: rawTs,\n          linkedTo: links[o.id] || null,\n          machineId: (_ref2 = (_o$machineId = o.machineId) !== null && _o$machineId !== void 0 ? _o$machineId : o.machine) !== null && _ref2 !== void 0 ? _ref2 : ''\n        };\n      });\n\n      // 6) Inject placeholders into jobById\n      placeholders.forEach(phJob => {\n        jobById[phJob.id] = {\n          ...phJob,\n          machineId: 'queue',\n          embroidery_start: '',\n          start_date: '',\n          linkedTo: null\n        };\n      });\n\n      // 7) Apply manualState overrides\n      ['machine1', 'machine2'].forEach(col => {\n        (manualState[col] || []).forEach(id => {\n          if (jobById[id]) jobById[id].machineId = col;\n        });\n      });\n\n      // 8) Build each machineâ€™s list\n      const buildMachine = colId => {\n        const manualList = manualState[colId] || [];\n        const existing = manualList.filter(id => jobById[id]).map(id => jobById[id]);\n        const appended = Object.values(jobById).filter(j => j.machineId === colId && !manualList.includes(j.id));\n        return [...existing, ...appended];\n      };\n      const machine1Jobs = buildMachine('machine1');\n      const machine2Jobs = buildMachine('machine2');\n\n      // 9) Build & sort queue (includes placeholders) by (due date â€“ run time)\n      const queueJobs = sortQueue(Object.values(jobById).filter(j => !['machine1', 'machine2'].includes(j.machineId)));\n\n      // 10) Schedule machine runtimes and set columns\n      setColumns({\n        queue: {\n          ...columns.queue,\n          jobs: queueJobs\n        },\n        machine1: {\n          ...columns.machine1,\n          jobs: scheduleMachineJobs(machine1Jobs)\n        },\n        machine2: {\n          ...columns.machine2,\n          jobs: scheduleMachineJobs(machine2Jobs)\n        }\n      });\n    } catch (err) {\n      console.error('fetchAll error:', err);\n    }\n  };\n\n  // === Section 6: Placeholder CRUD ===\n  const submitPlaceholder = () => {\n    const job = {\n      id: ph.id || `ph-${Date.now()}`,\n      company: ph.company,\n      quantity: +ph.quantity || 1,\n      stitchCount: +ph.stitchCount || 30000,\n      due_date: ph.inHand,\n      due_type: ph.dueType,\n      machineId: 'queue'\n    };\n    if (ph.id) {\n      setPlaceholders(ps => ps.map(p => p.id === ph.id ? job : p));\n      setColumns(c => ({\n        ...c,\n        queue: {\n          ...c.queue,\n          jobs: c.queue.jobs.map(j => j.id === ph.id ? job : j)\n        },\n        machine1: {\n          ...c.machine1,\n          jobs: c.machine1.jobs.map(j => j.id === ph.id ? job : j)\n        },\n        machine2: {\n          ...c.machine2,\n          jobs: c.machine2.jobs.map(j => j.id === ph.id ? job : j)\n        }\n      }));\n    } else {\n      setPlaceholders(ps => [job, ...ps]);\n      setColumns(c => ({\n        ...c,\n        queue: {\n          ...c.queue,\n          jobs: [job, ...c.queue.jobs]\n        }\n      }));\n    }\n    setShowModal(false);\n    setPh({\n      id: null,\n      company: '',\n      quantity: '',\n      stitchCount: '',\n      inHand: '',\n      dueType: 'Hard Date'\n    });\n  };\n  const removePlaceholder = id => {\n    setPlaceholders(ps => ps.filter(p => p.id !== id));\n    setColumns(c => ({\n      ...c,\n      queue: {\n        ...c.queue,\n        jobs: c.queue.jobs.filter(j => j.id !== id)\n      },\n      machine1: {\n        ...c.machine1,\n        jobs: c.machine1.jobs.filter(j => j.id !== id)\n      },\n      machine2: {\n        ...c.machine2,\n        jobs: c.machine2.jobs.filter(j => j.id !== id)\n      }\n    }));\n  };\n  const editPlaceholder = job => {\n    setPh({\n      id: job.id,\n      company: job.company,\n      quantity: job.quantity,\n      stitchCount: job.stitchCount,\n      inHand: job.due_date,\n      dueType: job.due_type\n    });\n    setShowModal(true);\n  };\n  // === Section 7: toggleLink (full replacement) ===\n  const toggleLink = (colId, idx) => {\n    var _colJobs$idx, _colJobs;\n    // step 1: read current link-map and our working columns\n    const currentMap = loadLinks();\n    const colJobs = columns[colId].jobs;\n    const thisId = (_colJobs$idx = colJobs[idx]) === null || _colJobs$idx === void 0 ? void 0 : _colJobs$idx.id;\n    const nextId = (_colJobs = colJobs[idx + 1]) === null || _colJobs === void 0 ? void 0 : _colJobs.id;\n    if (!thisId || !nextId) return;\n\n    // step 2: flip it in our persisted map\n    if (currentMap[thisId] === nextId) {\n      delete currentMap[thisId];\n    } else {\n      currentMap[thisId] = nextId;\n    }\n    saveLinks(currentMap);\n    setLinks(currentMap);\n\n    // step 3: rebuild all job.linkedTo flags from scratch\n    setColumns(cols => {\n      const newCols = {};\n      Object.entries(cols).forEach(([cId, col]) => {\n        newCols[cId] = {\n          ...col,\n          jobs: col.jobs.map(job => ({\n            ...job,\n            // clear every linkedTo first\n            linkedTo: null\n          }))\n        };\n      });\n\n      // step 4: re-apply only the links still in currentMap\n      Object.entries(newCols).forEach(([cId, col]) => {\n        newCols[cId].jobs = col.jobs.map(job => {\n          const target = currentMap[job.id];\n          return target ? {\n            ...job,\n            linkedTo: target\n          } : job;\n        });\n      });\n      return newCols;\n    });\n  };\n\n  // === Section 8: Drag & Drop Handler (with Manual Assignment/Order + auto-unlink) ===\n  const onDragEnd = result => {\n    const {\n      source,\n      destination,\n      draggableId\n    } = result;\n    if (!destination) return;\n    const srcId = source.droppableId;\n    const dstId = destination.droppableId;\n    const srcIdx = source.index;\n    const dstIdx = destination.index;\n\n    // 1) Pure reorder within the same column?\n    if (srcId === dstId) {\n      const colJobs = Array.from(columns[srcId].jobs);\n      const [moved] = colJobs.splice(srcIdx, 1);\n      colJobs.splice(dstIdx, 0, moved);\n      const newJobs = srcId === 'machine1' || srcId === 'machine2' ? scheduleMachineJobs(colJobs) :\n      // queue: always sorted by due-date minus run-time\n      colJobs.sort((a, b) => {\n        const da = parseDueDate(a.due_date),\n          db = parseDueDate(b.due_date);\n        if (da && db) return da - db;\n        if (da) return -1;\n        if (db) return 1;\n        return 0;\n      });\n      setColumns(cols => ({\n        ...cols,\n        [srcId]: {\n          ...cols[srcId],\n          jobs: newJobs\n        }\n      }));\n      return;\n    }\n\n    // 2) Cross-column move â†’ update manualState in localStorage\n    const manualState = JSON.parse(localStorage.getItem('manualState') || JSON.stringify({\n      machine1: [],\n      machine2: []\n    }));\n    // remove from any existing machine lists\n    ['machine1', 'machine2'].forEach(col => {\n      manualState[col] = (manualState[col] || []).filter(id => id !== draggableId);\n    });\n    // if dropped into a machine, insert into that machineâ€™s manual list\n    if (dstId === 'machine1' || dstId === 'machine2') {\n      const arr = Array.from(manualState[dstId] || []);\n      arr.splice(dstIdx, 0, draggableId);\n      manualState[dstId] = arr;\n    }\n    localStorage.setItem('manualState', JSON.stringify(manualState));\n\n    // 3) Splice out of source & into destination\n    const srcJobs = Array.from(columns[srcId].jobs);\n    const [moved] = srcJobs.splice(srcIdx, 1);\n    const jobForDest = dstId === 'queue' ? {\n      ...moved,\n      start_date: '',\n      _rawStart: null,\n      _rawEnd: null,\n      start: '',\n      end: '',\n      delivery: '',\n      isLate: false\n    } : moved;\n    const dstJobs = Array.from(columns[dstId].jobs);\n    dstJobs.splice(dstIdx, 0, jobForDest);\n\n    // 4) Auto-unlink if inserting into the middle of a chain on a machine\n    if (dstId !== 'queue' && dstIdx > 0 && dstIdx < dstJobs.length - 1) {\n      const left = dstJobs[dstIdx - 1];\n      const right = dstJobs[dstIdx + 1];\n      setLinks(linkMap => {\n        const m = {\n          ...linkMap\n        };\n        if (m[left.id] === right.id) {\n          delete m[left.id];\n          saveLinks(m);\n          // also clear the in-memory flag so UI outline disappears\n          left.linkedTo = null;\n          dstJobs[dstIdx - 1] = left;\n        }\n        return m;\n      });\n    }\n\n    // 5) Reschedule all machines\n    const next = {\n      ...columns,\n      [srcId]: {\n        ...columns[srcId],\n        jobs: srcJobs\n      },\n      [dstId]: {\n        ...columns[dstId],\n        jobs: dstJobs\n      }\n    };\n    ['machine1', 'machine2'].forEach(col => {\n      next[col].jobs = scheduleMachineJobs(next[col].jobs);\n    });\n\n    // 6) Commit\n    setColumns(next);\n  };\n\n  // === Section 9: Render via Section9.jsx ===\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Section9, {\n      columns: columns,\n      handleSync: handleSync,\n      syncStatus: syncStatus,\n      showModal: showModal,\n      setShowModal: setShowModal,\n      onDragEnd: onDragEnd,\n      getChain: getChain,\n      toggleLink: toggleLink,\n      editPlaceholder: editPlaceholder,\n      removePlaceholder: removePlaceholder,\n      ph: ph,\n      setPh: setPh,\n      submitPlaceholder: submitPlaceholder,\n      LIGHT_YELLOW: LIGHT_YELLOW,\n      DARK_YELLOW: DARK_YELLOW,\n      LIGHT_GREY: LIGHT_GREY,\n      DARK_GREY: DARK_GREY,\n      LIGHT_PURPLE: LIGHT_PURPLE,\n      DARK_PURPLE: DARK_PURPLE,\n      BUBBLE_START: BUBBLE_START,\n      BUBBLE_END: BUBBLE_END,\n      BUBBLE_DELIV: BUBBLE_DELIV\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 559,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 558,\n    columnNumber: 5\n  }, this);\n} // end of App component\n_s(App, \"2fbJEpXlipZl/zRIOeKGrNER8Pw=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","DragDropContext","Droppable","Draggable","axios","Section9","parseDueDate","subWorkDays","fmtMMDD","jsxDEV","_jsxDEV","API_ROOT","WORK_START_HR","WORK_START_MIN","WORK_END_HR","WORK_END_MIN","WEEKENDS","HOLIDAYS","LIGHT_YELLOW","DARK_YELLOW","LIGHT_GREY","DARK_GREY","LIGHT_PURPLE","DARK_PURPLE","BUBBLE_START","BUBBLE_END","BUBBLE_DELIV","App","_s","placeholders","setPlaceholders","JSON","parse","localStorage","getItem","setItem","stringify","columns","setColumns","queue","title","jobs","machine1","machine2","links","setLinks","loadLinks","syncStatus","setSyncStatus","showModal","setShowModal","ph","setPh","id","company","quantity","stitchCount","inHand","dueType","fetchAll","handleSync","setTimeout","isHoliday","dt","Date","isNaN","includes","toISOString","slice","isWorkday","getDay","clampToWorkHours","d","getHours","getMinutes","setDate","getDate","setHours","addWorkTime","start","ms","remaining","current","endOfDay","free","getTime","fmtDT","pad","n","String","padStart","month","getMonth","day","h","m","ap","test","parts","split","length","mo","da","yr","getFullYear","addWorkDays","days","added","removed","sortQueue","arr","sort","a","b","due_date","db","scheduleMachineJobs","prevEnd","map","job","idx","eedDay","cutoff","embroidery_start","nowIso","put","catch","console","error","qty","Math","ceil","runMs","end","_rawStart","_rawEnd","delivery","isLate","saveLinks","getChain","fwd","rev","forEach","j","linkedTo","root","chain","cur","push","manualState","prevEmb","Object","values","flatMap","col","start_date","data","orders","embList","Promise","all","get","embMap","row","trim","jobById","o","_ref","_embMap$id","_ref2","_o$machineId","rawTs","stitch_count","design","due_type","machineId","machine","phJob","buildMachine","colId","manualList","existing","filter","appended","machine1Jobs","machine2Jobs","queueJobs","err","submitPlaceholder","now","ps","p","c","removePlaceholder","editPlaceholder","toggleLink","_colJobs$idx","_colJobs","currentMap","colJobs","thisId","nextId","cols","newCols","entries","cId","target","onDragEnd","result","source","destination","draggableId","srcId","droppableId","dstId","srcIdx","index","dstIdx","Array","from","moved","splice","newJobs","srcJobs","jobForDest","dstJobs","left","right","linkMap","next","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/eckar/machine-scheduler/frontend/src/App.js"],"sourcesContent":["// File: frontend/src/App.js\nimport React, { useState, useEffect } from 'react';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport axios from 'axios';\nimport Section9 from './Section9';\nimport { parseDueDate, subWorkDays, fmtMMDD } from './helpers';\n\n// CONFIGURATION\nconst API_ROOT       = 'http://localhost:5000/api';\nconst WORK_START_HR  = 8,  WORK_START_MIN = 30;\nconst WORK_END_HR    = 16, WORK_END_MIN   = 30;\nconst WEEKENDS       = [0,6];\nconst HOLIDAYS       = ['2025-01-01','2025-12-25'];\n\n// COLOR CONSTANTS\nconst LIGHT_YELLOW  = '#FFF9C4', DARK_YELLOW  = '#FDD835';\nconst LIGHT_GREY    = '#ECEFF1', DARK_GREY    = '#616161';\nconst LIGHT_PURPLE  = '#E1BEE7', DARK_PURPLE  = '#6A1B9A';\nconst BUBBLE_START  = '#e0f7fa';\nconst BUBBLE_END    = '#ffe0b2';\nconst BUBBLE_DELIV  = '#c8e6c9';\n\nexport default function App() {\n  // Persisted placeholders (lazy-loaded)\n  const [placeholders, setPlaceholders] = useState(() => {\n    return JSON.parse(localStorage.getItem('placeholders') || '[]');\n  });\n  useEffect(() => {\n    localStorage.setItem('placeholders', JSON.stringify(placeholders));\n  }, [placeholders]);\n\n  // Core columns state\n  const [columns, setColumns]       = useState({\n    queue:    { title: 'Queue',     jobs: [] },\n    machine1: { title: 'Machine 1', jobs: [] },\n    machine2: { title: 'Machine 2', jobs: [] },\n  });\n  const [links, setLinks]           = useState(loadLinks());\n  const [syncStatus, setSyncStatus] = useState('');\n\n  // Modal form state\n  const [showModal, setShowModal] = useState(false);\n  const [ph, setPh] = useState({\n    id:         null,\n    company:    '',\n    quantity:   '',\n    stitchCount:'',\n    inHand:     '',\n    dueType:    'Hard Date'\n  });\n\n  // Initial data load\n  useEffect(() => {\n    fetchAll();\n  }, []);\n\n  // Manual sync handler\n  const handleSync = async () => {\n    setSyncStatus('');\n    await fetchAll();\n    setSyncStatus('updated');\n    setTimeout(() => setSyncStatus(''), 2000);\n  };\n\n// === Section 2: Helpers ===\nfunction isHoliday(dt) {\n  return dt instanceof Date &&\n         !isNaN(dt) &&\n         HOLIDAYS.includes(dt.toISOString().slice(0,10));\n}\n\nfunction isWorkday(dt) {\n  return dt instanceof Date &&\n         !isNaN(dt) &&\n         !WEEKENDS.includes(dt.getDay()) &&\n         !isHoliday(dt);\n}\n\nfunction clampToWorkHours(dt) {\n  let d = new Date(dt);\n  while (\n    !isWorkday(d) ||\n    d.getHours() < WORK_START_HR ||\n    (d.getHours() === WORK_START_HR && d.getMinutes() < WORK_START_MIN)\n  ) {\n    d.setDate(d.getDate() + 1);\n    d.setHours(WORK_START_HR, WORK_START_MIN, 0, 0);\n  }\n  if (\n    d.getHours() > WORK_END_HR ||\n    (d.getHours() === WORK_END_HR && d.getMinutes() >= WORK_END_MIN)\n  ) {\n    d.setDate(d.getDate() + 1);\n    d.setHours(WORK_START_HR, WORK_START_MIN, 0, 0);\n    return clampToWorkHours(d);\n  }\n  return d;\n}\n\nfunction addWorkTime(start, ms) {\n  let remaining = ms;\n  let current   = clampToWorkHours(start);\n  while (remaining > 0) {\n    const endOfDay = new Date(current);\n    endOfDay.setHours(WORK_END_HR, WORK_END_MIN, 0, 0);\n    const free = endOfDay.getTime() - current.getTime();\n    if (free <= 0) {\n      current = clampToWorkHours(new Date(current.setDate(current.getDate() + 1)));\n    } else if (remaining <= free) {\n      current   = new Date(current.getTime() + remaining);\n      remaining = 0;\n    } else {\n      remaining -= free;\n      current    = new Date(endOfDay);\n    }\n  }\n  return current;\n}\n\nfunction fmtDT(dt) {\n  const pad = n => String(n).padStart(2,'0');\n  const month = pad(dt.getMonth() + 1);\n  const day   = pad(dt.getDate());\n  let h = dt.getHours(),\n      m = pad(dt.getMinutes()),\n      ap = h >= 12 ? 'PM' : 'AM';\n  h = h % 12 || 12;\n  return `${month}/${day} ${pad(h)}:${m} ${ap}`;\n}\n\nfunction parseDueDate(d) {\n  if (!d) return null;\n  if (/^\\d{4}-\\d{2}-\\d{2}$/.test(d)) return new Date(d);\n  const parts = d.split('/');\n  if (parts.length >= 2) {\n    const mo = +parts[0], da = +parts[1],\n          yr = parts.length === 3 ? +parts[2] : new Date().getFullYear();\n    if (!isNaN(mo) && !isNaN(da) && !isNaN(yr)) return new Date(yr, mo-1, da);\n  }\n  const dt = new Date(d);\n  return isNaN(dt) ? null : dt;\n}\n\nfunction addWorkDays(start, days) {\n  let d = new Date(start), added = 0;\n  while (added < days) {\n    d.setDate(d.getDate()+1);\n    if (isWorkday(d)) added++;\n  }\n  return d;\n}\n\nfunction subWorkDays(start, days) {\n  let d = new Date(start), removed = 0;\n  while (removed < days) {\n    d.setDate(d.getDate()-1);\n    if (isWorkday(d)) removed++;\n  }\n  return d;\n}\n\nfunction fmtMMDD(d) {\n  const dt = new Date(d);\n  const mo = String(dt.getMonth()+1).padStart(2,'0');\n  const da = String(dt.getDate()).padStart(2,'0');\n  return `${mo}/${da}`;\n}\n\nfunction sortQueue(arr) {\n  return [...arr].sort((a,b) => {\n    const da = parseDueDate(a.due_date), db = parseDueDate(b.due_date);\n    if (da && db) return da - db;\n    if (da) return -1;\n    if (db) return 1;\n    return 0;\n  });\n}\n\n// === Section 3: Scheduling & Late (using embroidery_start) ===\nfunction scheduleMachineJobs(jobs) {\n  let prevEnd = null;\n\n  return jobs.map((job, idx) => {\n    // 1) Cutoff for late (6 work-days before due)\n    const eedDay = subWorkDays(parseDueDate(job.due_date), 6);\n    const cutoff = new Date(eedDay);\n    cutoff.setHours(WORK_END_HR, WORK_END_MIN, 0, 0);\n\n    // 2) StartTime\n    let start;\n    if (idx === 0) {\n      if (job.embroidery_start) {\n        start = clampToWorkHours(new Date(job.embroidery_start));\n      } else {\n        const nowIso = new Date().toISOString();\n        job.embroidery_start = nowIso;\n        start = clampToWorkHours(new Date(nowIso));\n        axios\n          .put(`${API_ROOT}/orders/${job.id}`, { embroidery_start: nowIso })\n          .catch(console.error);\n      }\n    } else {\n      start = clampToWorkHours(new Date(prevEnd.getTime() + 30*60000));\n    }\n\n    // 3) Run â†’ end\n    const qty   = job.quantity % 6 === 0\n      ? job.quantity\n      : Math.ceil(job.quantity/6)*6;\n    const runMs = (job.stitchCount/30000)*(qty/6)*3600000;\n    const end   = addWorkTime(start, runMs);\n\n    // 4) Decorate\n    job._rawStart = start;\n    job._rawEnd   = end;\n    job.start     = fmtDT(start);\n    job.end       = fmtDT(end);\n    job.delivery  = fmtMMDD(addWorkDays(end,6));\n    job.isLate    = end > cutoff;\n\n    prevEnd = end;\n    return job;\n  });\n}\n\n// === Section 4: Link Utilities ===\nfunction loadLinks() {\n  try {\n    return JSON.parse(localStorage.getItem('jobLinks') || '{}');\n  } catch {\n    return {};\n  }\n}\n\nfunction saveLinks(map) {\n  localStorage.setItem('jobLinks', JSON.stringify(map));\n}\n\nfunction getChain(jobs, id) {\n  const fwd = {}, rev = {};\n  jobs.forEach(j => {\n    if (j.linkedTo) {\n      fwd[j.id]    = j.linkedTo;\n      rev[j.linkedTo] = j.id;\n    }\n  });\n\n  // find root of the chain\n  let root = id;\n  while (rev[root]) {\n    root = rev[root];\n  }\n\n  // build the chain array\n  const chain = [];\n  let cur = root;\n  while (cur) {\n    chain.push(cur);\n    cur = fwd[cur];\n  }\n  return chain;\n}\n\n// === Section 5: FETCH & MERGE (with Placeholder Injection) ===\nconst fetchAll = async () => {\n  try {\n    // 1) Load manual state\n    const manualState = JSON.parse(\n      localStorage.getItem('manualState') ||\n      JSON.stringify({ machine1: [], machine2: [] })\n    );\n\n    // 2) Preserve embroidery_start\n    const prevEmb = {};\n    Object.values(columns)\n      .flatMap(col => col.jobs)\n      .forEach(j => {\n        prevEmb[j.id] = j.embroidery_start || j.start_date || '';\n      });\n\n    // 3) Fetch live data\n    const [{ data: orders }, { data: embList }] = await Promise.all([\n      axios.get(`${API_ROOT}/orders`),\n      axios.get(`${API_ROOT}/embroideryList`)\n    ]);\n\n    // 4) Build embroidery map\n    const embMap = {};\n    embList.forEach(row => {\n      const id = String(row['Order #'] || '').trim();\n      if (id) embMap[id] = row['Embroidery Start Time'] || '';\n    });\n\n    // 5) Construct jobById from server data\n    const jobById = {};\n    orders.forEach(o => {\n      if (o.id == null) return;\n      const id    = String(o.id).trim();\n      const rawTs = embMap[id] ?? prevEmb[id] ?? '';\n      jobById[id] = {\n        ...o,\n        id,\n        stitchCount:      o.stitch_count,\n        quantity:         o.quantity,\n        company:          o.company,\n        design:           o.design,\n        due_date:         o.due_date,\n        due_type:         o.due_type,\n        embroidery_start: rawTs,\n        start_date:       rawTs,\n        linkedTo:         links[o.id] || null,\n        machineId:        o.machineId ?? o.machine ?? ''\n      };\n    });\n\n    // 6) Inject placeholders into jobById\n    placeholders.forEach(phJob => {\n      jobById[phJob.id] = {\n        ...phJob,\n        machineId:        'queue',\n        embroidery_start: '',\n        start_date:       '',\n        linkedTo:         null\n      };\n    });\n\n    // 7) Apply manualState overrides\n    ['machine1','machine2'].forEach(col => {\n      (manualState[col] || []).forEach(id => {\n        if (jobById[id]) jobById[id].machineId = col;\n      });\n    });\n\n    // 8) Build each machineâ€™s list\n    const buildMachine = colId => {\n      const manualList = manualState[colId] || [];\n      const existing   = manualList.filter(id => jobById[id]).map(id => jobById[id]);\n      const appended   = Object.values(jobById)\n        .filter(j => j.machineId === colId && !manualList.includes(j.id));\n      return [...existing, ...appended];\n    };\n    const machine1Jobs = buildMachine('machine1');\n    const machine2Jobs = buildMachine('machine2');\n\n    // 9) Build & sort queue (includes placeholders) by (due date â€“ run time)\n    const queueJobs = sortQueue(\n      Object.values(jobById).filter(\n        j => !['machine1','machine2'].includes(j.machineId)\n      )\n    );\n\n    // 10) Schedule machine runtimes and set columns\n    setColumns({\n      queue:    { ...columns.queue,    jobs: queueJobs },\n      machine1: { ...columns.machine1, jobs: scheduleMachineJobs(machine1Jobs) },\n      machine2: { ...columns.machine2, jobs: scheduleMachineJobs(machine2Jobs) },\n    });\n  } catch (err) {\n    console.error('fetchAll error:', err);\n  }\n};\n\n\n// === Section 6: Placeholder CRUD ===\nconst submitPlaceholder = () => {\n  const job = {\n    id:         ph.id || `ph-${Date.now()}`,\n    company:    ph.company,\n    quantity:   +ph.quantity || 1,\n    stitchCount:+ph.stitchCount || 30000,\n    due_date:   ph.inHand,\n    due_type:   ph.dueType,\n    machineId:  'queue',\n  };\n\n  if (ph.id) {\n    setPlaceholders(ps => ps.map(p => p.id === ph.id ? job : p));\n    setColumns(c => ({\n      ...c,\n      queue:    { ...c.queue,    jobs: c.queue.jobs.map(j => j.id === ph.id ? job : j) },\n      machine1: { ...c.machine1, jobs: c.machine1.jobs.map(j => j.id === ph.id ? job : j) },\n      machine2: { ...c.machine2, jobs: c.machine2.jobs.map(j => j.id === ph.id ? job : j) },\n    }));\n  } else {\n    setPlaceholders(ps => [job, ...ps]);\n    setColumns(c => ({\n      ...c,\n      queue: { ...c.queue, jobs: [job, ...c.queue.jobs] }\n    }));\n  }\n\n  setShowModal(false);\n  setPh({ id:null, company:'', quantity:'', stitchCount:'', inHand:'', dueType:'Hard Date' });\n};\n\nconst removePlaceholder = id => {\n  setPlaceholders(ps => ps.filter(p => p.id !== id));\n  setColumns(c => ({\n    ...c,\n    queue:    { ...c.queue,    jobs: c.queue.jobs.filter(j => j.id !== id) },\n    machine1: { ...c.machine1, jobs: c.machine1.jobs.filter(j => j.id !== id) },\n    machine2: { ...c.machine2, jobs: c.machine2.jobs.filter(j => j.id !== id) },\n  }));\n};\n\nconst editPlaceholder = job => {\n  setPh({\n    id:         job.id,\n    company:    job.company,\n    quantity:   job.quantity,\n    stitchCount:job.stitchCount,\n    inHand:     job.due_date,\n    dueType:    job.due_type\n  });\n  setShowModal(true);\n};\n// === Section 7: toggleLink (full replacement) ===\nconst toggleLink = (colId, idx) => {\n  // step 1: read current link-map and our working columns\n  const currentMap = loadLinks();\n  const colJobs   = columns[colId].jobs;\n  const thisId    = colJobs[idx]?.id;\n  const nextId    = colJobs[idx + 1]?.id;\n  if (!thisId || !nextId) return;\n\n  // step 2: flip it in our persisted map\n  if (currentMap[thisId] === nextId) {\n    delete currentMap[thisId];\n  } else {\n    currentMap[thisId] = nextId;\n  }\n  saveLinks(currentMap);\n  setLinks(currentMap);\n\n  // step 3: rebuild all job.linkedTo flags from scratch\n  setColumns(cols => {\n    const newCols = {};\n    Object.entries(cols).forEach(([cId, col]) => {\n      newCols[cId] = {\n        ...col,\n        jobs: col.jobs.map(job => ({\n          ...job,\n          // clear every linkedTo first\n          linkedTo: null\n        }))\n      };\n    });\n\n    // step 4: re-apply only the links still in currentMap\n    Object.entries(newCols).forEach(([cId, col]) => {\n      newCols[cId].jobs = col.jobs.map(job => {\n        const target = currentMap[job.id];\n        return target ? { ...job, linkedTo: target } : job;\n      });\n    });\n\n    return newCols;\n  });\n};\n\n// === Section 8: Drag & Drop Handler (with Manual Assignment/Order + auto-unlink) ===\nconst onDragEnd = result => {\n  const { source, destination, draggableId } = result;\n  if (!destination) return;\n\n  const srcId = source.droppableId;\n  const dstId = destination.droppableId;\n  const srcIdx = source.index;\n  const dstIdx = destination.index;\n\n  // 1) Pure reorder within the same column?\n  if (srcId === dstId) {\n    const colJobs = Array.from(columns[srcId].jobs);\n    const [moved] = colJobs.splice(srcIdx, 1);\n    colJobs.splice(dstIdx, 0, moved);\n\n    const newJobs =\n      srcId === 'machine1' || srcId === 'machine2'\n        ? scheduleMachineJobs(colJobs)\n        : // queue: always sorted by due-date minus run-time\n          colJobs.sort((a, b) => {\n            const da = parseDueDate(a.due_date),\n                  db = parseDueDate(b.due_date);\n            if (da && db) return da - db;\n            if (da) return -1;\n            if (db) return 1;\n            return 0;\n          });\n\n    setColumns(cols => ({\n      ...cols,\n      [srcId]: { ...cols[srcId], jobs: newJobs }\n    }));\n    return;\n  }\n\n  // 2) Cross-column move â†’ update manualState in localStorage\n  const manualState = JSON.parse(\n    localStorage.getItem('manualState') ||\n    JSON.stringify({ machine1: [], machine2: [] })\n  );\n  // remove from any existing machine lists\n  ['machine1','machine2'].forEach(col => {\n    manualState[col] = (manualState[col] || []).filter(id => id !== draggableId);\n  });\n  // if dropped into a machine, insert into that machineâ€™s manual list\n  if (dstId === 'machine1' || dstId === 'machine2') {\n    const arr = Array.from(manualState[dstId] || []);\n    arr.splice(dstIdx, 0, draggableId);\n    manualState[dstId] = arr;\n  }\n  localStorage.setItem('manualState', JSON.stringify(manualState));\n\n  // 3) Splice out of source & into destination\n  const srcJobs = Array.from(columns[srcId].jobs);\n  const [moved] = srcJobs.splice(srcIdx, 1);\n  const jobForDest =\n    dstId === 'queue'\n      ? { ...moved, start_date:'', _rawStart:null, _rawEnd:null, start:'', end:'', delivery:'', isLate:false }\n      : moved;\n\n  const dstJobs = Array.from(columns[dstId].jobs);\n  dstJobs.splice(dstIdx, 0, jobForDest);\n\n  // 4) Auto-unlink if inserting into the middle of a chain on a machine\n  if (dstId !== 'queue' && dstIdx > 0 && dstIdx < dstJobs.length - 1) {\n    const left  = dstJobs[dstIdx - 1];\n    const right = dstJobs[dstIdx + 1];\n    setLinks(linkMap => {\n      const m = { ...linkMap };\n      if (m[left.id] === right.id) {\n        delete m[left.id];\n        saveLinks(m);\n        // also clear the in-memory flag so UI outline disappears\n        left.linkedTo = null;\n        dstJobs[dstIdx - 1] = left;\n      }\n      return m;\n    });\n  }\n\n  // 5) Reschedule all machines\n  const next = {\n    ...columns,\n    [srcId]: { ...columns[srcId], jobs: srcJobs },\n    [dstId]: { ...columns[dstId], jobs: dstJobs }\n  };\n  ['machine1','machine2'].forEach(col => {\n    next[col].jobs = scheduleMachineJobs(next[col].jobs);\n  });\n\n  // 6) Commit\n  setColumns(next);\n};\n\n// === Section 9: Render via Section9.jsx ===\n  return (\n    <div>\n      <Section9\n        columns={columns}\n        handleSync={handleSync}\n        syncStatus={syncStatus}\n        showModal={showModal}\n        setShowModal={setShowModal}\n        onDragEnd={onDragEnd}\n        getChain={getChain}\n        toggleLink={toggleLink}\n        editPlaceholder={editPlaceholder}\n        removePlaceholder={removePlaceholder}\n        ph={ph}\n        setPh={setPh}\n        submitPlaceholder={submitPlaceholder}\n        LIGHT_YELLOW={LIGHT_YELLOW}\n        DARK_YELLOW={DARK_YELLOW}\n        LIGHT_GREY={LIGHT_GREY}\n        DARK_GREY={DARK_GREY}\n        LIGHT_PURPLE={LIGHT_PURPLE}\n        DARK_PURPLE={DARK_PURPLE}\n        BUBBLE_START={BUBBLE_START}\n        BUBBLE_END={BUBBLE_END}\n        BUBBLE_DELIV={BUBBLE_DELIV}\n      />\n    </div>\n  );\n} // end of App component"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}