{"ast":null,"code":"// File: frontend/src/helpers.js\n\n// Parse a due‐date string (YYYY-MM-DD or MM/DD[/YYYY]) into a Date or null\nexport function parseDueDate(d) {\n  if (!d) return null;\n  // ISO format\n  if (/^\\d{4}-\\d{2}-\\d{2}$/.test(d)) return new Date(d);\n  // MM/DD[/YYYY]\n  const parts = d.split('/');\n  if (parts.length >= 2) {\n    const mo = +parts[0],\n      da = +parts[1],\n      yr = parts.length === 3 ? +parts[2] : new Date().getFullYear();\n    if (!isNaN(mo) && !isNaN(da) && !isNaN(yr)) return new Date(yr, mo - 1, da);\n  }\n  // Fallback\n  const dt = new Date(d);\n  return isNaN(dt) ? null : dt;\n}\n\n// Subtract a given number of work-days (skipping weekends and holidays)\nexport function subWorkDays(start, days) {\n  let d = new Date(start),\n    removed = 0;\n  const WEEKENDS = [0, 6];\n  const HOLIDAYS = ['2025-01-01', '2025-12-25'];\n  function isHoliday(dt) {\n    return HOLIDAYS.includes(dt.toISOString().slice(0, 10));\n  }\n  function isWorkday(dt) {\n    return !WEEKENDS.includes(dt.getDay()) && !isHoliday(dt);\n  }\n  while (removed < days) {\n    d.setDate(d.getDate() - 1);\n    if (isWorkday(d)) removed++;\n  }\n  return d;\n}\n\n// Format a Date (or date‐string) as MM/DD\nexport function fmtMMDD(d) {\n  const dt = new Date(d);\n  const mo = String(dt.getMonth() + 1).padStart(2, '0');\n  const da = String(dt.getDate()).padStart(2, '0');\n  return `${mo}/${da}`;\n}","map":{"version":3,"names":["parseDueDate","d","test","Date","parts","split","length","mo","da","yr","getFullYear","isNaN","dt","subWorkDays","start","days","removed","WEEKENDS","HOLIDAYS","isHoliday","includes","toISOString","slice","isWorkday","getDay","setDate","getDate","fmtMMDD","String","getMonth","padStart"],"sources":["C:/Users/eckar/machine-scheduler/frontend/src/helpers.js"],"sourcesContent":["// File: frontend/src/helpers.js\r\n\r\n// Parse a due‐date string (YYYY-MM-DD or MM/DD[/YYYY]) into a Date or null\r\nexport function parseDueDate(d) {\r\n  if (!d) return null;\r\n  // ISO format\r\n  if (/^\\d{4}-\\d{2}-\\d{2}$/.test(d)) return new Date(d);\r\n  // MM/DD[/YYYY]\r\n  const parts = d.split('/');\r\n  if (parts.length >= 2) {\r\n    const mo = +parts[0], da = +parts[1],\r\n          yr = parts.length === 3 ? +parts[2] : new Date().getFullYear();\r\n    if (!isNaN(mo) && !isNaN(da) && !isNaN(yr)) return new Date(yr, mo-1, da);\r\n  }\r\n  // Fallback\r\n  const dt = new Date(d);\r\n  return isNaN(dt) ? null : dt;\r\n}\r\n\r\n// Subtract a given number of work-days (skipping weekends and holidays)\r\nexport function subWorkDays(start, days) {\r\n  let d = new Date(start), removed = 0;\r\n  const WEEKENDS = [0, 6];\r\n  const HOLIDAYS = ['2025-01-01','2025-12-25'];\r\n  function isHoliday(dt) {\r\n    return HOLIDAYS.includes(dt.toISOString().slice(0,10));\r\n  }\r\n  function isWorkday(dt) {\r\n    return !WEEKENDS.includes(dt.getDay()) && !isHoliday(dt);\r\n  }\r\n\r\n  while (removed < days) {\r\n    d.setDate(d.getDate() - 1);\r\n    if (isWorkday(d)) removed++;\r\n  }\r\n  return d;\r\n}\r\n\r\n// Format a Date (or date‐string) as MM/DD\r\nexport function fmtMMDD(d) {\r\n  const dt = new Date(d);\r\n  const mo = String(dt.getMonth() + 1).padStart(2,'0');\r\n  const da = String(dt.getDate()).padStart(2,'0');\r\n  return `${mo}/${da}`;\r\n}\r\n"],"mappings":"AAAA;;AAEA;AACA,OAAO,SAASA,YAAYA,CAACC,CAAC,EAAE;EAC9B,IAAI,CAACA,CAAC,EAAE,OAAO,IAAI;EACnB;EACA,IAAI,qBAAqB,CAACC,IAAI,CAACD,CAAC,CAAC,EAAE,OAAO,IAAIE,IAAI,CAACF,CAAC,CAAC;EACrD;EACA,MAAMG,KAAK,GAAGH,CAAC,CAACI,KAAK,CAAC,GAAG,CAAC;EAC1B,IAAID,KAAK,CAACE,MAAM,IAAI,CAAC,EAAE;IACrB,MAAMC,EAAE,GAAG,CAACH,KAAK,CAAC,CAAC,CAAC;MAAEI,EAAE,GAAG,CAACJ,KAAK,CAAC,CAAC,CAAC;MAC9BK,EAAE,GAAGL,KAAK,CAACE,MAAM,KAAK,CAAC,GAAG,CAACF,KAAK,CAAC,CAAC,CAAC,GAAG,IAAID,IAAI,CAAC,CAAC,CAACO,WAAW,CAAC,CAAC;IACpE,IAAI,CAACC,KAAK,CAACJ,EAAE,CAAC,IAAI,CAACI,KAAK,CAACH,EAAE,CAAC,IAAI,CAACG,KAAK,CAACF,EAAE,CAAC,EAAE,OAAO,IAAIN,IAAI,CAACM,EAAE,EAAEF,EAAE,GAAC,CAAC,EAAEC,EAAE,CAAC;EAC3E;EACA;EACA,MAAMI,EAAE,GAAG,IAAIT,IAAI,CAACF,CAAC,CAAC;EACtB,OAAOU,KAAK,CAACC,EAAE,CAAC,GAAG,IAAI,GAAGA,EAAE;AAC9B;;AAEA;AACA,OAAO,SAASC,WAAWA,CAACC,KAAK,EAAEC,IAAI,EAAE;EACvC,IAAId,CAAC,GAAG,IAAIE,IAAI,CAACW,KAAK,CAAC;IAAEE,OAAO,GAAG,CAAC;EACpC,MAAMC,QAAQ,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;EACvB,MAAMC,QAAQ,GAAG,CAAC,YAAY,EAAC,YAAY,CAAC;EAC5C,SAASC,SAASA,CAACP,EAAE,EAAE;IACrB,OAAOM,QAAQ,CAACE,QAAQ,CAACR,EAAE,CAACS,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,CAAC,EAAC,EAAE,CAAC,CAAC;EACxD;EACA,SAASC,SAASA,CAACX,EAAE,EAAE;IACrB,OAAO,CAACK,QAAQ,CAACG,QAAQ,CAACR,EAAE,CAACY,MAAM,CAAC,CAAC,CAAC,IAAI,CAACL,SAAS,CAACP,EAAE,CAAC;EAC1D;EAEA,OAAOI,OAAO,GAAGD,IAAI,EAAE;IACrBd,CAAC,CAACwB,OAAO,CAACxB,CAAC,CAACyB,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC;IAC1B,IAAIH,SAAS,CAACtB,CAAC,CAAC,EAAEe,OAAO,EAAE;EAC7B;EACA,OAAOf,CAAC;AACV;;AAEA;AACA,OAAO,SAAS0B,OAAOA,CAAC1B,CAAC,EAAE;EACzB,MAAMW,EAAE,GAAG,IAAIT,IAAI,CAACF,CAAC,CAAC;EACtB,MAAMM,EAAE,GAAGqB,MAAM,CAAChB,EAAE,CAACiB,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAC,GAAG,CAAC;EACpD,MAAMtB,EAAE,GAAGoB,MAAM,CAAChB,EAAE,CAACc,OAAO,CAAC,CAAC,CAAC,CAACI,QAAQ,CAAC,CAAC,EAAC,GAAG,CAAC;EAC/C,OAAO,GAAGvB,EAAE,IAAIC,EAAE,EAAE;AACtB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}